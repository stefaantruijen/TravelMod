package com.tvdp.travelmod.objects.blocks.machines.workbench;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ItemStackHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ITickable;
import net.minecraft.util.NonNullList;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.util.text.TextComponentTranslation;

public class TileEntityTravelWorkBench  extends TileEntity implements IInventory
{
	private NonNullList<ItemStack> inventory = NonNullList.<ItemStack>withSize(11, ItemStack.EMPTY);
	private String customName;

	@Override
	public String getName()
	{
		return this.hasCustomName() ? this.customName : "container.travel_workbench";
	}

	@Override
	public boolean hasCustomName()
	{
		return this.customName != null && !this.customName.isEmpty();
	}
	
	@Override
	public ITextComponent getDisplayName()
	{
		return this.hasCustomName() ? new TextComponentString(this.getName()) : new TextComponentTranslation(this.getName());
	}

	@Override
	public int getSizeInventory()
	{
		return this.inventory.size();
	}
	
	public void setCustomName(String customName) 
	{
		this.customName = customName;
	}

	@Override
	public boolean isEmpty() 
	{
		for(ItemStack stack : this.inventory)
		{
			if(!stack.isEmpty()) return false;
		}
		return true;
	}

	@Override
	public ItemStack getStackInSlot(int index)
	{
		return (ItemStack)this.inventory.get(index);
	}

	@Override
	public ItemStack decrStackSize(int index, int count)
	{
		return ItemStackHelper.getAndSplit(this.inventory, index, count);
	}

	@Override
	public ItemStack removeStackFromSlot(int index)
	{
		return ItemStackHelper.getAndRemove(this.inventory, index);
	}

	@Override
	public void setInventorySlotContents(int index, ItemStack stack)
	{
		ItemStack itemstack = (ItemStack)this.inventory.get(index);
		boolean flag = !stack.isEmpty() && stack.isItemEqual(itemstack) && ItemStack.areItemStackTagsEqual(stack, itemstack);
		this.inventory.set(index, stack);
	}
	
	@Override
	public void readFromNBT(NBTTagCompound compound)
	{
		super.readFromNBT(compound);
		this.inventory = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
		ItemStackHelper.loadAllItems(compound, this.inventory);
		
		if(compound.hasKey("CustomName", 8)) this.setCustomName(compound.getString("CustomName"));
	}
	
	@Override
	public NBTTagCompound writeToNBT(NBTTagCompound compound) 
	{
		super.writeToNBT(compound);
		ItemStackHelper.saveAllItems(compound, this.inventory);
		
		if(this.hasCustomName()) compound.setString("CustomName", this.customName);
		return compound;
	}
	
	@Override
	public int getInventoryStackLimit()
	{
		return 64;
	}
	
	/*crafting
	@Override
	public void update()
	{
		if (!world.isRemote)
		{
			if (this.canCraft())
			{
				this.craft();
				this.markDirty();
			}
		}
	}*/
	
	public boolean canCraft()
	{
		if(((ItemStack)this.inventory.get(0)).isEmpty() && ((ItemStack)this.inventory.get(1)).isEmpty()) return false;
		else 
		{
			ItemStack result = TravelWorkBenchRecipes.getInstance().getTravelResult((ItemStack)this.inventory.get(0), (ItemStack)this.inventory.get(1), (ItemStack)this.inventory.get(2), (ItemStack)this.inventory.get(3), (ItemStack)this.inventory.get(4), (ItemStack)this.inventory.get(5), (ItemStack)this.inventory.get(6), (ItemStack)this.inventory.get(7), (ItemStack)this.inventory.get(8), (ItemStack)this.inventory.get(9));	
			if(result.isEmpty())
			{
				System.out.print("error");
				return false;
			}
			else
			{
				
				ItemStack output = (ItemStack)this.inventory.get(10);
				return true;
			}
		}
	}
	
	public void craft()
	{
		ItemStack input1 = this.inventory.get(0);
		ItemStack input2 = this.inventory.get(1);
		ItemStack input3 = this.inventory.get(2);
		ItemStack input4 = this.inventory.get(3);
		ItemStack input5 = this.inventory.get(4);
		ItemStack input6 = this.inventory.get(5);
		ItemStack input7 = this.inventory.get(6);
		ItemStack input8 = this.inventory.get(7);
		ItemStack input9 = this.inventory.get(8);
		ItemStack input10 = this.inventory.get(9);
		
		ItemStack result = TravelWorkBenchRecipes.getInstance().getTravelResult(input1, input2, input3, input4, input5, input6, input7, input8, input9, input10);
		setInventorySlotContents(10, result);
	}

	@Override
	public boolean isUsableByPlayer(EntityPlayer player) 
	{
		return this.world.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
	}

	@Override
	public void openInventory(EntityPlayer player) {}

	@Override
	public void closeInventory(EntityPlayer player) {}

	@Override
	public boolean isItemValidForSlot(int index, ItemStack stack) 
	{
		if (index == 10) return false;
		else return true;
	}
	
	public String getGuiID() 
	{
		return "travmod:travel_workbench";
	}

	@Override
	public int getField(int id)
	{
		return 0;
	}

	@Override
	public void setField(int id, int value)
	{
		
	}

	@Override
	public int getFieldCount() 
	{
		return 11;
	}

	@Override
	public void clear() 
	{
		this.inventory.clear();
	}

}
