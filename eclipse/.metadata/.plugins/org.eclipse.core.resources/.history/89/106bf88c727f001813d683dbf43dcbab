package com.tvdp.travelmod.objects.blocks.machines.workbench;

import java.util.Map;
import java.util.Map.Entry;

import com.google.common.collect.HashBasedTable;
import com.google.common.collect.Table;
import com.tvdp.travelmod.init.BlockInit;
import com.tvdp.travelmod.init.ItemInit;

import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;

public class TravelWorkBenchRecipes
{
	private static final TravelWorkBenchRecipes INSTANCE = new TravelWorkBenchRecipes();
	private final Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> craftingList = HashBasedTable.<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>>create();
	
	public static TravelWorkBenchRecipes getInstance()
	{
		return INSTANCE;
	}
	
	private TravelWorkBenchRecipes() 
	{
		addTravelRecipe(new ItemStack(BlockInit.ANDAMANTIUM_BLOCK), new ItemStack(BlockInit.COPPER_BLOCK), new ItemStack(ItemInit.TRAVEL_DUST), new ItemStack(ItemInit.TRAVEL_REFINER), new ItemStack(BlockInit.ANDAMANTIUM_BLOCK), new ItemStack(BlockInit.COPPER_BLOCK), new ItemStack(Blocks.COAL_BLOCK), new ItemStack(Blocks.COAL_BLOCK), new ItemStack(BlockInit.TRAVEL_GLASS_PANE, 2), new ItemStack(BlockInit.TRAVEL_GLASS_PANE, 2), new ItemStack(BlockInit.TRAVEL_FURNACE));
	}

	
	public void addTravelRecipe(ItemStack input1, ItemStack input2, ItemStack input3, ItemStack input4, ItemStack input5, ItemStack input6, ItemStack input7, ItemStack input8, ItemStack input9, ItemStack input10, ItemStack result) 
	{
		if(getTravelResult(input1, input2, input3, input4, input5, input6, input7, input8, input9, input10) != ItemStack.EMPTY) return;
		
		//fill table
		Table<ItemStack, ItemStack, ItemStack> table1 = HashBasedTable.<ItemStack, ItemStack, ItemStack>create();
		table1.put(input9, input10, result);
		
		Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>> table2 = HashBasedTable.<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>create();
		table2.put(input7, input8, table1);
		
		Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>> table3 = HashBasedTable.<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>create();
		table3.put(input5, input6, table2);
		
		Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>> table4 = HashBasedTable.<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>create();
		table4.put(input3, input4, table3);
		
		this.craftingList.put(input1, input2, table4);
	}
	
	public ItemStack getTravelResult(ItemStack input1, ItemStack input2, ItemStack input3, ItemStack input4, ItemStack input5, ItemStack input6, ItemStack input7, ItemStack input8, ItemStack input9, ItemStack input10) 
	{
		for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>>> entry : this.craftingList.columnMap().entrySet()) 
		{
			if(this.compareItemStacks(input1, (ItemStack)entry.getKey())) 
			{
				for(Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> ent1 : entry.getValue().entrySet())
				{
					if (this.compareItemStacks(input2, (ItemStack)ent1.getKey()));
					for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> ent2 : ent1.getValue().columnMap().entrySet())
					{
						if (this.compareItemStacks(input3, (ItemStack)ent2.getKey()));
						for (Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>> ent3 : ent2.getValue().entrySet())
						{
							if (this.compareItemStacks(input4, (ItemStack)ent3.getKey()))
							{
								for (Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>> ent4 : ent3.getValue().columnMap().entrySet())
								{
									if (this.compareItemStacks(input5, (ItemStack)ent4.getKey()))
									{
										for (Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>> ent5 : ent4.getValue().entrySet())
										{
											if (this.compareItemStacks(input6, (ItemStack)ent5.getKey()))
											{
												for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, ItemStack>>> ent6 : ent5.getValue().columnMap().entrySet())
												{
													if (this.compareItemStacks(input7, (ItemStack)ent6.getKey()))
													{
														for (Entry<ItemStack, Table<ItemStack, ItemStack, ItemStack>> ent7 : ent6.getValue().entrySet())
														{
															if (this.compareItemStacks(input8, (ItemStack)ent7.getKey()))
															{
																for (Entry<ItemStack, Map<ItemStack, ItemStack>> ent8 : ent7.getValue().columnMap().entrySet())
																{
																	if (this.compareItemStacks(input9, (ItemStack)ent8.getKey()))
																	{
																		for (Entry<ItemStack, ItemStack> ent9 : ent8.getValue().entrySet())
																		{
																			if (this.compareItemStacks(input10, (ItemStack)ent9.getKey()))
																				return (ItemStack)ent9.getValue();
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return ItemStack.EMPTY;
	}
	
	public void shrinkInputs(ItemStack input1, ItemStack input2, ItemStack input3, ItemStack input4, ItemStack input5, ItemStack input6, ItemStack input7, ItemStack input8, ItemStack input9, ItemStack input10)
	{
		for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>>> entry : this.craftingList.columnMap().entrySet()) 
		{
			if(this.compareItemStacks(input1, (ItemStack)entry.getKey())) 
			{
				for(Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> ent1 : entry.getValue().entrySet())
				{
					if (this.compareItemStacks(input2, (ItemStack)ent1.getKey()));
					for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> ent2 : ent1.getValue().columnMap().entrySet())
					{
						if (this.compareItemStacks(input3, (ItemStack)ent2.getKey()));
						for (Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>> ent3 : ent2.getValue().entrySet())
						{
							if (this.compareItemStacks(input4, (ItemStack)ent3.getKey()))
							{
								for (Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>> ent4 : ent3.getValue().columnMap().entrySet())
								{
									if (this.compareItemStacks(input5, (ItemStack)ent4.getKey()))
									{
										for (Entry<ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>> ent5 : ent4.getValue().entrySet())
										{
											if (this.compareItemStacks(input6, (ItemStack)ent5.getKey()))
											{
												for(Entry<ItemStack, Map<ItemStack, Table<ItemStack, ItemStack, ItemStack>>> ent6 : ent5.getValue().columnMap().entrySet())
												{
													if (this.compareItemStacks(input7, (ItemStack)ent6.getKey()))
													{
														for (Entry<ItemStack, Table<ItemStack, ItemStack, ItemStack>> ent7 : ent6.getValue().entrySet())
														{
															if (this.compareItemStacks(input8, (ItemStack)ent7.getKey()))
															{
																for (Entry<ItemStack, Map<ItemStack, ItemStack>> ent8 : ent7.getValue().columnMap().entrySet())
																{
																	if (this.compareItemStacks(input9, (ItemStack)ent8.getKey()))
																	{
																		for (Entry<ItemStack, ItemStack> ent9 : ent8.getValue().entrySet())
																		{
																			if (this.compareItemStacks(input10, (ItemStack)ent9.getKey()))
																			{
																				input1.shrink(entry.getKey().getCount());
																				input2.shrink(ent1.getKey().getCount());
																				input3.shrink(ent2.getKey().getCount());
																				input4.shrink(ent3.getKey().getCount());
																				input5.shrink(ent4.getKey().getCount());
																				input6.shrink(ent5.getKey().getCount());
																				input7.shrink(ent6.getKey().getCount());
																				input8.shrink(ent7.getKey().getCount());
																				input9.shrink(ent8.getKey().getCount());
																				input10.shrink(ent9.getKey().getCount());
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	private boolean compareItemStacks(ItemStack stack1, ItemStack stack2)
	{
		return (stack2.getItem() == stack1.getItem() && (stack2.getMetadata() == 32767 || stack2.getMetadata() == stack1.getMetadata())) && stack1.getCount() >= stack2.getCount();
	}
	
	public Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, Table<ItemStack, ItemStack, ItemStack>>>>> getCraftingList() 
	{
		return this.craftingList;
	}
}
